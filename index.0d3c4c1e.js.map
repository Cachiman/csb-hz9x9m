{"mappings":"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","sources":["node_modules/preact/src/util.js","node_modules/preact/src/options.js","node_modules/preact/src/create-element.js","node_modules/preact/src/component.js","node_modules/preact/src/create-context.js","node_modules/preact/src/constants.js","node_modules/preact/src/diff/children.js","node_modules/preact/src/diff/props.js","node_modules/preact/src/diff/index.js","node_modules/preact/src/render.js","node_modules/preact/src/clone-element.js","node_modules/preact/src/diff/catch-error.js","env.ts"],"sourcesContent":["import { EMPTY_ARR } from './constants';\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n","import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n","import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n","import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {import('./internal').Component} a\n * @param {import('./internal').Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n","import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {import('./internal').Component[]} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n","export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n","import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getLastDom(oldParentVNode).nextSibling;\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(parentDom, vnode, vnode, c, vnode._dom, oldDom);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 1\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * @param {import('../internal').VNode} vnode\n */\nfunction getLastDom(vnode) {\n\tif (vnode.type == null || typeof vnode.type === 'string') {\n\t\treturn vnode._dom;\n\t}\n\n\tif (vnode._children) {\n\t\tfor (let i = vnode._children.length - 1; i >= 0; i--) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child) {\n\t\t\t\tlet lastDom = getLastDom(child);\n\t\t\t\tif (lastDom) {\n\t\t\t\t\treturn lastDom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'width' &&\n\t\t\tname !== 'height' &&\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\treturn this._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n","import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// In cases of bailing due to strict-equality we have to reset force as well\n\t\t\t\t\tc._force = false;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tvnode._component = undefined;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type !== 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n","import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n","/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n","import * as preact from 'preact';\n\n// Parcel picks the `source` field of the monorepo packages and thus doesn't\n// apply the Babel config. We therefore need to manually override the constants\n// in the app, as well as the React pragmas.\n// See https://twitter.com/devongovett/status/1134231234605830144\n(global as any).__DEV__ = process.env.NODE_ENV !== 'production';\n(global as any).__TEST__ = false;\n(global as any).h = preact.h;\n(global as any).React = preact;\n"],"names":["slice","options","vnodeId","isValidElement","rerenderQueue","prevDebounce","defer","depthSort","i","EMPTY_OBJ","EMPTY_ARR","IS_NON_DIMENSIONAL","assign","obj","props","removeNode","node","parentNode","removeChild","createElement","type","children","key","ref","normalizedProps","arguments","length","call","defaultProps","createVNode","original","vnode","__k","__","__b","__e","__d","__c","__h","constructor","__v","createRef","current","Fragment","Component","context","this","getDomSibling","childIndex","indexOf","sibling","updateParentDomPointers","child","base","enqueueRender","c","push","process","__r","debounceRendering","renderQueueLength","component","commitQueue","oldVNode","oldDom","parentDom","sort","shift","__P","diff","__n","ownerSVGElement","commitRoot","diffChildren","renderResult","newParentVNode","oldParentVNode","globalContext","isSvg","excessDomChildren","isHydrating","j","childVNode","newDom","firstChildDom","refs","oldChildren","oldChildrenLength","Array","isArray","reorderChildren","placeChild","getLastDom","nextSibling","unmount","applyRef","tmp","toChildArray","out","some","nextDom","sibDom","outer","appendChild","insertBefore","lastDom","setStyle","style","value","setProperty","test","dom","name","oldValue","useCapture","o","cssText","replace","toLowerCase","l","addEventListener","eventProxyCapture","eventProxy","removeEventListener","e","removeAttribute","setAttribute","event","newVNode","isNew","oldProps","oldState","snapshot","clearProcessingException","newProps","provider","componentContext","renderHook","count","newType","contextType","__E","prototype","render","doRender","sub","state","_sb","__s","getDerivedStateFromProps","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","forEach","componentWillUpdate","componentDidUpdate","getChildContext","getSnapshotBeforeUpdate","oldHtml","newHtml","nodeType","localName","document","createTextNode","createElementNS","is","data","childNodes","dangerouslySetInnerHTML","attributes","__html","innerHTML","diffProps","hydrate","checked","diffElementNodes","diffed","root","cb","parentVNode","skipRemove","r","componentWillUnmount","replaceNode","firstChild","cloneElement","createContext","defaultValue","contextId","Consumer","contextValue","Provider","subs","ctx","_props","old","splice","error","errorInfo","ctor","handled","getDerivedStateFromError","setState","componentDidCatch","update","callback","s","forceUpdate","Promise","then","bind","resolve","setTimeout","a","b","$1Hdcz","parcelRequire","$parcel$global","__DEV__","__TEST__","h","React"],"version":3,"file":"index.0d3c4c1e.js.map"}